data$Month <- floor_date(data$txDate, "month")
data$value <- as.numeric(as.character(data$value))
monthly_transaction_value <- data %>%
group_by(Month) %>%
summarise(TotalValue = sum(value, na.rm = TRUE))
ggplot(monthly_transaction_value, aes(x = Month, y = TotalValue)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Monthly Total Transaction Value of Senators",
x = "Date",
y = "Total Transaction Value")
ggplot(monthly_transaction_value, aes(x = Month, y = TotalValue)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = scales::comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Monthly Total Transaction Value of Senators",
x = "Date",
y = "Total Transaction Value")
# Count the number of buy vs. sell transactions
buy_sell_counts <- table(data$txType)
# Pie chart
pie(buy_sell_counts, main = "Buy vs. Sell Transactions")
# Aggregate transactions by sector
sector_counts <- table(data$issuer.sector)
# Bar plot
barplot(sector_counts, main = "Transactions by Sector", col = rainbow(length(sector_counts)), las = 2, cex.names = 0.8)
# Bar plot
barplot(sector_counts, main = "Transactions by Sector", col = rainbow(length(sector_counts)))
# Bar plot
barplot(sector_counts, main = "Transactions by Sector", col = rainbow(length(sector_counts)), las = 2, cex.names = 0.5)
# Bar plot
barplot(sector_counts, main = "Transactions by Sector", col = rainbow(length(sector_counts)), las = 10, cex.names = 0.5)
# Bar plot
barplot(sector_counts, main = "Transactions by Sector", col = rainbow(length(sector_counts)), las = 2, cex.names = 1)
# Aggregate transactions by state
state_counts <- table(data$politician._stateId)
# Bar plot
barplot(state_counts, main = "State Representation in Transactions", col = rainbow(length(state_counts)), las = 2, cex.names = 0.8)
install.packages("treemap")
library(treemap)
value_sector <- data %>%
group_by(issuer.sector) %>%
summarise(TotalValue = sum(value, na.rm = TRUE))
treemap(value_sector,
index="sector",
vSize="value",
title="Sector Distribution",
fontsize.labels=12,
palette="lightblue")
treemap(value_sector,
index="issuer.sector",
vSize="TotalValue",
title="Sector Distribution",
fontsize.labels=12,
palette="lightblue")
install.packages("RColorBrewer")
knitr::opts_chunk$set(echo = TRUE)
color_palette <- brewer.pal(n = min(length(value_sector$issuer.sector), 9), name = "Blues")  # Change 'Blues' to any palette you like
library(RColorBrewer)
color_palette <- brewer.pal(n = min(length(value_sector$issuer.sector), 9), name = "Blues")  # Change 'Blues' to any palette you like
treemap(value_sector,
index="issuer.sector",
vSize="TotalValue",
title="Sector Distribution",
fontsize.labels=12,
palette=color_palette)
# Create the treemap with hex color values
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
vColor = "TotalValue",
type="index",
palette = color_palette,  # Use the color palette defined above
title = "Sector Distribution",
fontsize.labels = 12
)
library(treemap)
# Create the treemap with hex color values
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
vColor = "TotalValue",
type="index",
palette = color_palette,  # Use the color palette defined above
title = "Sector Distribution",
fontsize.labels = 12
)
# Create the treemap with hex color values
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
vColor = "TotalValue",
palette = color_palette,  # Use the color palette defined above
title = "Sector Distribution",
fontsize.labels = 12
)
# Create the treemap with hex color values
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
vColor = "TotalValue",
type="index",
palette = color_palette,  # Use the color palette defined above
title = "Sector Distribution",
fontsize.labels = 10
)
treemap(value_sector,
index = "issuer.sector)",
vSize = "TotalValue",
title = "Sector Distribution",
fontsize.labels = 12,
fontcolor.labels = "white",
fontface.labels = 2,
bg.labels = "transparent",
align.labels = list(
c("center", "center"),
c("center", "center")
),
overlap.labels = 0.5,
inflate.labels = F
)
# Now create the treemap
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
title = "Sector Distribution",
fontsize.labels = 12,
fontcolor.labels = "white",
fontface.labels = 2,
bg.labels = "transparent",
align.labels = list(
c("center", "center"),
c("center", "center")
),
overlap.labels = 0.5,
inflate.labels = F
)
# Now create the treemap
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
title = "Sector Distribution",
fontsize.labels = 12,
fontcolor.labels = "white",
fontface.labels = 2,
bg.labels = "transparent",
align.labels = list(
c("center", "center"),
c("center", "center")
),
palette = color_palette,  # Use the color palette defined above
overlap.labels = 0.5,
inflate.labels = F
)
# Create the treemap with hex color values
treemap(value_sector,
index = "issuer.sector",
vSize = "TotalValue",
vColor = "TotalValue",
type="index",
palette = color_palette,  # Use the color palette defined above
title = "Sector Distribution",
fontsize.labels = 10
)
data <-senator_investments_df
# Convert the transaction date to a Date object
data$txDate <- as.Date(data$txDate, "%Y-%m-%d")
data$Month <- floor_date(data$txDate, "month")
data$Month <- FLOOR_DATE(data$txDate, "month")
data$Month <- floor_date(data$txDate, "month")
data$value <- as.numeric(as.character(data$value))
monthly_transaction_value <- data %>%
group_by(Month) %>%
summarise(TotalValue = sum(value, na.rm = TRUE))
#visualization
library(dplyr)
data <-senator_investments_df
# Convert the transaction date to a Date object
data$txDate <- as.Date(data$txDate, "%Y-%m-%d")
data$Month <- floor_date(data$txDate, "month")
library(tidyverse)
library(tidyquant)
library(PerformanceAnalytics)
library(xts)
library(lubridate)
library(Quandl)
library(riingo)
library(httr)
library(tidyr)
library(dplyr)
library(jsonlite)
library(httr)
library(purrr)
library(dplyr)
data <-senator_investments_df
# Convert the transaction date to a Date object
data$txDate <- as.Date(data$txDate, "%Y-%m-%d")
data$Month <- floor_date(data$txDate, "month")
data$value <- as.numeric(as.character(data$value))
monthly_transaction_value <- data %>%
group_by(Month) %>%
summarise(TotalValue = sum(value, na.rm = TRUE))
ggplot(monthly_transaction_value, aes(x = Month, y = TotalValue)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = scales::comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Monthly Total Transaction Value of Senators",
x = "Date",
y = "Total Transaction Value")
monthly_transaction_value <- data %>%
mutate(AdjustedValue = if_else(txType == "sell", -value, value)) %>%
group_by(Month) %>%
summarise(TotalValue = sum(AdjustedValue, na.rm = TRUE))
ggplot(monthly_transaction_value, aes(x = Month, y = TotalValue)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
scale_y_continuous(labels = scales::comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Monthly Total Transaction Value of Senators",
x = "Date",
y = "Total Transaction Value")
library(httr)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(plotly)
## GET LAP DATA
response_16 <- GET('https://api.openf1.org/v1/laps?session_key=latest&driver_number=16')
parsed_data_16 <- fromJSON(content(response_16, 'text'))
print(parsed_data_16)
#filter out mini-sector speeds
df_filtered_16 <- subset(parsed_data_16, select = -c(segments_sector_1,
segments_sector_2,
segments_sector_3))
head(df_filtered_16)
ggplot(df_filtered_16, aes(x=lap_number, y=lap_duration)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title="Lap Duration Over Laps", x="Lap Number", y="Lap Duration (seconds)")
## GET STINT DATA
stint_response <- GET('https://api.openf1.org/v1/stints?session_key=latest&driver_number=16')
stint_parsed_data <- fromJSON(content(stint_response, 'text'))
head(stint_parsed_data)
# Mapping compounds to colors
compound_colors <- setNames(c("orange", "red", "green"), c("MEDIUM", "SOFT", "HARD"))
# Assign colors based on compound in stint data
stint_parsed_data$color <- compound_colors[stint_parsed_data$compound]
# Function to get tire color for each lap
get_tire_color_for_lap <- function(lap_number) {
for (i in 1:nrow(stint_parsed_data)) {
if (lap_number >= stint_parsed_data$lap_start[i] && lap_number <= stint_parsed_data$lap_end[i]) {
return(stint_parsed_data$color[i])
}
}
return(NA) # Return NA if no stint matches
}
# Apply function to each lap in lap_data
df_filtered_16$tire_color <- sapply(df_filtered_16$lap_number, get_tire_color_for_lap)
# Plotting
ggplot(df_filtered_16, aes(x = lap_number, y = lap_duration, color = tire_color, group = 1)) +
geom_line() +
geom_point() +
scale_color_identity() + # Use the actual colors specified in the data
theme_minimal() +
labs(title = "Lap Duration Over Laps by Tire Compound",
x = "Lap Number",
y = "Lap Duration (seconds)",
color = "Tire Compound")
# Convert the colors to a more descriptive label for the legend
df_filtered_16$tire_type <- ifelse(df_filtered_16$tire_color == "orange", "MEDIUM",
ifelse(df_filtered_16$tire_color == "red", "SOFT", "HARD"))
# Plotting with Plotly
fig <- plot_ly(data = df_filtered_16, x = ~lap_number, y = ~lap_duration, type = 'scatter', mode = 'lines+markers',
color = ~tire_type, colors = c('MEDIUM' = 'orange', 'SOFT' = 'red', 'HARD' = 'green'),
marker = list(size = 10))
fig <- fig %>% layout(title = 'Lap Duration Over Laps by Tire Compound',
xaxis = list(title = 'Lap Number'),
yaxis = list(title = 'Lap Duration (seconds)'),
legend = list(title = list(text = 'Tire Compound')))
# Show plot
fig
# carlos
## GET LAP DATA
response_55 <- GET('https://api.openf1.org/v1/laps?session_key=latest&driver_number=55')
parsed_data_55 <- fromJSON(content(response_55, 'text'))
print(parsed_data_55)
#filter out mini-sector speeds
df_filtered_55 <- subset(parsed_data_55, select = -c(segments_sector_1,
segments_sector_2,
segments_sector_3))
head(df_filtered_55)
ggplot(df_filtered_55, aes(x=lap_number, y=lap_duration)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title="Lap Duration Over Laps", x="Lap Number", y="Lap Duration (seconds)")
## GET STINT DATA
stint_response_55 <- GET('https://api.openf1.org/v1/stints?session_key=latest&driver_number=55')
stint_parsed_data_55 <- fromJSON(content(stint_response_55, 'text'))
head(stint_parsed_data_55)
# Mapping compounds to colors
compound_colors <- setNames(c("orange", "red", "green"), c("MEDIUM", "SOFT", "HARD"))
# Assign colors based on compound in stint data
stint_parsed_data_55$color <- compound_colors[stint_parsed_data_55$compound]
# Function to get tire color for each lap
get_tire_color_for_lap <- function(lap_number) {
for (i in 1:nrow(stint_parsed_data_55)) {
if (lap_number >= stint_parsed_data_55$lap_start[i] && lap_number <= stint_parsed_data_55$lap_end[i]) {
return(stint_parsed_data_55$color[i])
}
}
return(NA) # Return NA if no stint matches
}
# Apply function to each lap in lap_data
df_filtered_55$tire_color <- sapply(df_filtered_55$lap_number, get_tire_color_for_lap)
# Plotting
ggplot(df_filtered_55, aes(x = lap_number, y = lap_duration, color = tire_color, group = 1)) +
geom_line() +
geom_point() +
scale_color_identity() + # Use the actual colors specified in the data
theme_minimal() +
labs(title = "Lap Duration Over Laps by Tire Compound",
x = "Lap Number",
y = "Lap Duration (seconds)",
color = "Tire Compound")
# Convert the colors to a more descriptive label for the legend
df_filtered_55$tire_type <- ifelse(df_filtered_55$tire_color == "orange", "MEDIUM",
ifelse(df_filtered_55$tire_color == "red", "SOFT", "HARD"))
# Plotting with Plotly
df_filtered_16$name_tire <- paste(df_filtered_16$tire_type, '- Leclerc')
df_filtered_55$name_tire <- paste(df_filtered_55$tire_type, '- Sainz')
# Plotting with Plotly, adding two traces
fig <- plot_ly()
# Adding dataset 1 with a specific style
fig <- fig %>% add_trace(data = df_filtered_16, x = ~lap_number, y = ~lap_duration, type = 'scatter', mode = 'lines+markers',
color = ~tire_type, colors = c('MEDIUM' = 'orange', 'SOFT' = 'red', 'HARD' = 'green'),
marker = list(size = 10), line = list(dash = 'solid'),
name = ~name_tire)
# Adding dataset 2 with a different style
fig <- fig %>% add_trace(data = df_filtered_55, x = ~lap_number, y = ~lap_duration, type = 'scatter', mode = 'lines+markers',
color = ~tire_type, colors = c('MEDIUM' = 'orange4', 'SOFT' = 'red4', 'HARD' = 'green4'),
marker = list(size = 10, symbol = 'square'), line = list(dash = 'dot'),
name = ~name_tire)
# Adjusting the layout
fig <- fig %>% layout(title = 'Lap Duration Over Laps by Tire Compound',
xaxis = list(title = 'Lap Number'),
yaxis = list(title = 'Lap Duration (seconds)'),
legend = list(title = list(text = 'Tire Compound')))
# Show plot
fig
setwd("C:/Users/itsme/OneDrive/Desktop/Personal Projects/Meteorite-Landings")
head(data_meterorite)
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/meteorite-landings.csv", headers = TRUE)
data_meterorite <- read.csv("./Data/meteorite-landings.csv", header = TRUE)
head(data_meterorite)
count(is.na(data_meterorite))
count(is.na(data_meterorite) == TRUE)
(is.na(data_meterorite) == TRUE)
data_meterorite[(is.na(data_meterorite) == TRUE),]
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/meteorite-landings.csv", header = TRUE)
head(data_meterorite)
sum(is.na(data_meterorite))
colSums(is.na(data_meterorite))
unique(data_meterorite$fall)
unique(data_meterorite$nametype)
(sum(data_meterorite))
(nrow(data_meterorite))
(colSums(is.na(data_meterorite)))/(nrow(data_meterorite))
(sum(is.na(data_meterorite)))/(nrow(data_meterorite))
sum(is.na(data_meterorite))
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/Meteorite_Landings_20240401.csv", header = TRUE)
head(data_meterorite)
sum(is.na(data_meterorite))
unique(data_meterorite$nametype)
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/Meteorite_Landings_20240401.csv", header = TRUE)
head(data_meterorite)
sum(is.na(data_meterorite))
unique(data_meterorite$nametype)
nrow(data_meterorite)
colSums(is.na(data_meterorite))
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/Meteorite_Landings_20240401.csv", header = TRUE)
# Print head
head(data_meterorite)
# Calculate number of missing values
sum(is.na(data_meterorite))
# Total number of rows
nrow(data_meterorite)
# Column wise sum of missing data
colSums(is.na(data_meterorite))
# Calculate the mean mass for each recclass
mean_mass_by_class = data_meterorite.groupby('recclass')['mass (g)'].transform('mean')
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/Meteorite_Landings_20240401.csv", header = TRUE)
# Print head
head(data_meterorite)
# Calculate number of missing values
sum(is.na(data_meterorite))
# Total number of rows
nrow(data_meterorite)
# Column wise sum of missing data
colSums(is.na(data_meterorite))
# Calculate the mean mass for each recclass and impute missing values
meteorite_data_imputed <- data_meterorite %>%
group_by(recclass) %>%
mutate(mean_mass = mean(`mass (g)`, na.rm = TRUE), # Calculate mean mass for each group, excluding NAs
`mass (g)` = ifelse(is.na(`mass (g)`), mean_mass, `mass (g)`)) %>%
ungroup() %>%
select(-mean_mass) # Remove the temporary mean_mass column
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/Meteorite_Landings_20240401.csv", header = TRUE)
# Print head
head(data_meterorite)
# Calculate number of missing values
sum(is.na(data_meterorite))
# Total number of rows
nrow(data_meterorite)
# Column wise sum of missing data
colSums(is.na(data_meterorite))
# Calculate the mean mass for each recclass and impute missing values
meteorite_data_imputed <- data_meterorite %>%
group_by(recclass) %>%
mutate(mean_mass = mean(mass..g., na.rm = TRUE), # Calculate mean mass for each group, excluding NAs
mass..g. = ifelse(is.na(mass..g.), mean_mass, mass..g.)) %>%
ungroup() %>%
select(-mean_mass) # Remove the temporary mean_mass column
# If there are still NAs (in cases where all values in a group were missing), use the overall mean
overall_mean_mass <- mean(meteorite_data_imputed$mass..g., na.rm = TRUE)
meteorite_data_imputed$mass..g.[is.na(meteorite_data_imputed$mass..g.)] <- overall_mean_mass
# Verify the result
sum(is.na(meteorite_data_imputed$mass..g.))
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/Meteorite_Landings_20240401.csv", header = TRUE)
# Print head
head(data_meterorite)
# Calculate number of missing values
sum(is.na(data_meterorite))
# Total number of rows
nrow(data_meterorite)
# Column wise sum of missing data
colSums(is.na(data_meterorite))
# Calculate the mean mass for each recclass and impute missing values
data_meterorite <- data_meterorite %>%
group_by(recclass) %>%
mutate(
mean_mass = mean(mass..g., na.rm = TRUE), # Calculate mean mass for each group, excluding NAs
mass..g. = ifelse(is.na(mass..g.), mean_mass, mass..g.), # Impute missing mass values
median_year = median(year, na.rm = TRUE), # Calculate median year for each group, excluding NAs
year = ifelse(is.na(year), median_year, year) # Impute missing year values
) %>%
ungroup() %>%
select(-mean_mass, -median_year) # Remove the temporary columns
# Use the overall mean or median as a fallback for any remaining NAs
overall_mean_mass <- mean(data_meterorite$mass..g., na.rm = TRUE)
data_meterorite$mass..g.[is.na(data_meterorite$mass..g.)] <- overall_mean_mass
overall_median_year <- median(data_meterorite$year, na.rm = TRUE)
data_meterorite$year[is.na(data_meterorite$year)] <- overall_median_year
# Check for any remaining missing values
sum(is.na(data_meterorite$mass..g.))
sum(is.na(data_meterorite$year))
library(dplyr)
library(tidyverse)
data_meterorite <- read.csv("./Data/Meteorite_Landings_20240401.csv", header = TRUE)
# Print head
head(data_meterorite)
# Calculate number of missing values
sum(is.na(data_meterorite))
# Total number of rows
nrow(data_meterorite)
# Column wise sum of missing data
colSums(is.na(data_meterorite))
# Calculate the mean mass for each recclass and impute missing values
data_meterorite <- data_meterorite %>%
group_by(recclass) %>%
mutate(
mean_mass = mean(mass..g., na.rm = TRUE), # Calculate mean mass for each group, excluding NAs
mass..g. = ifelse(is.na(mass..g.), mean_mass, mass..g.), # Impute missing mass values
median_year = median(year, na.rm = TRUE), # Calculate median year for each group, excluding NAs
year = ifelse(is.na(year), median_year, year) # Impute missing year values
) %>%
ungroup() %>%
select(-mean_mass, -median_year) # Remove the temporary columns
# Use the overall mean or median as a fallback for any remaining NAs
overall_mean_mass <- mean(data_meterorite$mass..g., na.rm = TRUE)
data_meterorite$mass..g.[is.na(data_meterorite$mass..g.)] <- overall_mean_mass
overall_median_year <- median(data_meterorite$year, na.rm = TRUE)
data_meterorite$year[is.na(data_meterorite$year)] <- overall_median_year
# Check for any remaining missing values
sum(is.na(data_meterorite$mass..g.))
sum(is.na(data_meterorite$year))
# Export data into processed csv fro visualization
write.csv(data_meterorite, "./Data/meteorite_landing_processed.csv")
